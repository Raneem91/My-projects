#!/usr/bin/env python3
import random
"""This program plays a game of Rock, Paper, Scissors between two Players,
and reports both Player's scores each round."""

moves = ['rock', 'paper', 'scissors']

"""The Player class is the parent class for all of the Players
in this game"""


class Player:
    def move(self):
        return 'rock'

    def learn(self, my_move, their_move):
        pass


class HumanPlayer(Player):
    def move(self):
        move = 'none'
        while move not in moves:
            move = input('Enter rock, paper or scissors:\n')
            if move not in moves:
                print('please try again!!!')
        return move


class reflectplayer(Player):
    def __init__(self):
        self.next_move = 'rock'

    def move(self):
        return self.next_move

    def learn(self, my_move, their_move):
        self.next_move = their_move


class RandomPlayer(Player):
    def move(self):
        return random.choice(moves)


class cycleplayer(Player):
    def __init__(self):
        self.next_move = 0

    def move(self):
        return moves[self.next_move]

    def learn(self, my_move, their_move):
        if self.next_move <= 1:
            self.next_move = self.next_move+1
        elif self.next_move == 2:
            return moves[0]


def beats(one, two):
    return (
        (one == 'rock' and two == 'scissors') or
        (one == 'scissors' and two == 'paper') or
        (one == 'paper' and two == 'rock'))


class Game:
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
        self.p1.score = 0
        self.p2.score = 0

    def keep_score(self, p1, p2):
        if beats(p1, p2):
            self.p1.score = self.p1.score + 1
            print('Player 1 Has Won The Round!!')
        elif beats(p2, p1):
            self.p2.score = self.p2.score + 1
            print('Player 2 Has Won The Round!!')
        else:
            self.p1.score = self.p1.score
            self.p2.score = self.p2.score
            print('It is a Tie !!')

    def play_round(self):
        move1 = self.p1.move()
        move2 = self.p2.move()
        print(f"Player 1: {move1}  Player 2: {move2}")
        self.keep_score(move1, move2)
        self.p1.learn(move1, move2)
        self.p2.learn(move2, move1)

    def play_game(self):
        print("Game start!")
        for round in range(3):
            print(f"Round {round}:")
            self.play_round()
            print(self.p1.score, "-", self.p2.score)
        if (self.p1.score > self.p2.score):
            print('Player 1 Has Won The Game!!')
        elif(self.p1.score < self.p2.score):
            print('Player 2 Has Won The Game !!')
            print("Game over!")


if __name__ == '__main__':
    vaild_input = ['rock', 'reflect', 'random', 'cycle']
    player_input = 'none'

    while player_input not in vaild_input:
        player_input = input('Choose a player random, reflect or cycle: \n')

        if player_input not in vaild_input:
            print('please try again!!')

    my_dictionary = {
        "rock": Game(HumanPlayer(), Player()),
        "reflect": Game(HumanPlayer(), reflectplayer()),
        "random": Game(HumanPlayer(), RandomPlayer()),
        "cycle": Game(HumanPlayer(), cycleplayer())}

    game = my_dictionary[player_input.lower()]
    game.play_game()
